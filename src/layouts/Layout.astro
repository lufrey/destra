---
export interface Props {
  title: string;
}

const { title } = Astro.props;
const year = new Date().getFullYear();
import logo from '../assets/logo.svg';

const navigation = [
  { name: 'About', href: '/about' },
  { name: 'Project', href: '/project' },
  { name: 'Contact', href: '/contact' },
];
import { clsxt } from '../util';
const isCurrentPage = (href: string) => Astro.url.pathname.startsWith(href);
---

<!DOCTYPE html>
<html lang="de" class="text-[14px] md:text-[16px]">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="stylesheet" href="/fonts/fonts.css" />
    <meta name="generator" content={Astro.generator} />
    <meta name="robots" content="noindex, nofollow" />
    <title>{title}</title>
  </head>
  <body>
    <header class="bg-white">
      <div
        class="flex items-center justify-between px-8 py-6 m-auto max-w-screen-limit md:px-20 md:pr-16"
      >
        <a href="/"><img src={logo.src} class="block h-10" /></a>
        <nav class="items-center hidden gap-5 text-xl uppercase links md:flex">
          {
            navigation.map((link) => (
              <a
                class={clsxt(
                  ' px-5 py-2',
                  isCurrentPage(link.href)
                    ? 'bg-black text-bright hover:bg-black'
                    : 'hover:bg-bright'
                )}
                href={link.href}
              >
                {link.name}
              </a>
            ))
          }
        </nav>
        <div
          class="flex flex-col gap-1 transition-all md:hidden"
          id="open-sitemenu"
        >
          <div class="bg-primary h-0.5 w-8"></div>
          <div class="bg-primary h-0.5 w-8"></div>
          <div class="bg-primary h-0.5 w-8"></div>
          <div class="bg-primary h-0.5 w-8"></div>
          <div class="bg-primary h-0.5 w-8"></div>
        </div>
      </div>
    </header>
    <div
      class="fixed top-0 left-0 z-50 flex-col hidden w-screen h-screen p-6 transition-all duration-200 opacity-0 bg-primary pl-14"
      id="sitemenu"
    >
      <div
        class="relative flex flex-col justify-center h-10 ml-auto cursor-pointer"
        id="close-sitemenu"
      >
        <div class="bg-bright h-0.5 w-8 rotate-45 absolute -ml-0.5 right-0">
        </div>
        <div class="bg-bright h-0.5 w-8 -rotate-45 absolute -ml-0.5 right-0">
        </div>
      </div>
      <div
        class="flex flex-col justify-center gap-10 mt-10 mr-8 text-4xl text-center grow text-bright"
      >
        {
          navigation.map((link, index) => (
            <>
              <a class="hover:underline" href={link.href}>
                {link.name}
              </a>
              {index < navigation.length - 1 && <div class="h-0.5 bg-bright" />}
            </>
          ))
        }
      </div>
    </div>
    <slot />
    <footer>
      <div class="bg-[#212426]">
        <div
          class="flex items-center gap-8 p-8 py-10 m-auto md:px-20 max-w-screen-limit text-bright fadein"
        >
          <div class="text-2xl">Destra Robotics</div>
          <div class="flex gap-20 ml-auto font-mono uppercase md:text-xl">
            <!-- <a class="hover:underline" href="/impressum">Impressum</a> -->
            <div>Copyright - {year}</div>
          </div>
        </div>
      </div>
    </footer>
  </body>
  <!-- <style is:global>
    .fadein {
      @apply invisible translate-y-2 opacity-0;
    }
    .activeFadein {
      @apply visible translate-y-0 opacity-100 transition-all duration-1000;
    }
  </style> -->
  <script>
    // const targets = Array.from(document.querySelectorAll('.fadein') ?? []);

    // const observer = new IntersectionObserver((entries) => {
    //   entries.forEach((entry) => {
    //     if (entry.isIntersecting) {
    //       entry.target.classList.add('activeFadein');
    //       entry.target.classList.remove('fadein');
    //       observer.unobserve(entry.target);
    //       setTimeout(() => {
    //         entry.target.classList.remove('activeFadein');
    //       }, 1000);
    //     }
    //   });
    // });
    // targets.forEach((target) => observer.observe(target));

    const showSiteMenu = (state: boolean) => {
      const sitemenu = document.getElementById('sitemenu');
      if (!sitemenu) return;
      if (state) {
        sitemenu.classList.add('opacity-100', 'flex');
        sitemenu.classList.remove('opacity-0', 'hidden');
      } else {
        sitemenu.classList.add('opacity-0', 'hidden');
        sitemenu.classList.remove('opacity-100', 'flex');
      }
    };

    document
      .querySelector('#open-sitemenu')
      ?.addEventListener('click', () => showSiteMenu(true));
    document
      .querySelector('#close-sitemenu')
      ?.addEventListener('click', () => showSiteMenu(false));
  </script>
</html>
